//
//  NewsListPresenterTests.swift
//  BlognoneDemo
//
//  Created by Suraphan 'Rawd' Laokondee on 6/23/2560 BE.
//  Copyright (c) 2560 Suraphan 'Rawd' Laokondee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import BlognoneDemo
import XCTest

class NewsListPresenterTests: XCTestCase {
  // MARK: - Subject under test
  
  var sut: NewsListPresenter!
  
  // MARK: - Test lifecycle
  
  override func setUp() {
    super.setUp()
    setupNewsListPresenter()
  }
  
  override func tearDown() {
    super.tearDown()
  }
  
  // MARK: - Test setup
  
  func setupNewsListPresenter() {
    sut = NewsListPresenter()
  }
  
  // MARK: - Test doubles 
  
  // 1 demo NewsListPresenterOutputSpy
  
  class NewsListPresenterOutputSpy: NewsListPresenterOutput {
    // MARK: Method call expectations
    var displayFetchNewsFeedCalled = false
    
    // MARK: Argument expectations
    var viewModel: NewsList.RequestNewsFeed.ViewModel!
    
    // MARK: Spied methods
    func displayRequestNewsFeed(viewModel: NewsList.RequestNewsFeed.ViewModel) {
      displayFetchNewsFeedCalled = true
      self.viewModel = viewModel
    }
  }
  
  // MARK: - Tests
  
  func testPresentFetchedNewsListShouldFormatFetchedNewsListForDisplay() {
    // 2 demo test presenter format
    
    // Given
    let newsListPresenterOutputSpy = NewsListPresenterOutputSpy()
    sut.output = newsListPresenterOutputSpy
    
    var dateComponents = DateComponents()
    dateComponents.year = 2007
    dateComponents.month = 6
    dateComponents.day = 29
    
    let date = Calendar.current.date(from: dateComponents)!
    let news = News(title: "Title", creator: "Creator", publishDate: date)
    let response = NewsList.RequestNewsFeed.Response(newsList: [news])
    
    // When
    sut.presentRequestNewsFeed(response: response)
    
    // Then
    
    let displayedNewsFeeds = newsListPresenterOutputSpy.viewModel.displayNewsFeed
    let viewModel = displayedNewsFeeds.first!
    XCTAssertEqual(viewModel.title, "Title")
    XCTAssertEqual(viewModel.creator, "Creator")
    XCTAssertEqual(viewModel.publishDate, "29/6/50")
  }
  
  func testPresentFetchedNewsListShouldAskViewControllerToDisplayFetchedNewsList() {
    // 3 demo test Present display
    
    // Given
    let newsListPresenterOutputSpy = NewsListPresenterOutputSpy()
    sut.output = newsListPresenterOutputSpy
    
    let news = News(title: "Title", creator: "Creator", publishDate: Date())
    let response = NewsList.RequestNewsFeed.Response(newsList: [news])
    
    // When
    sut.presentRequestNewsFeed(response: response)
    
    // Then
    
    XCTAssert(newsListPresenterOutputSpy.displayFetchNewsFeedCalled, "Presenting fetched NewsList should ask view controller to display them")
  }
}






