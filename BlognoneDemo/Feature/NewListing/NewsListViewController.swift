//
//  NewsListViewController.swift
//  BlognoneDemo
//
//  Created by Suraphan 'Rawd' Laokondee on 6/23/2560 BE.
//  Copyright (c) 2560 Suraphan 'Rawd' Laokondee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol NewsListViewControllerInput {
  func displayRequestNewsFeed(viewModel: NewsList.RequestNewsFeed.ViewModel)
}

protocol NewsListViewControllerOutput {
  func fetchNewsFeed(request: NewsList.RequestNewsFeed.Request)
}

class NewsListViewController: UIViewController, NewsListViewControllerInput {
  var output: NewsListViewControllerOutput!
  var router: NewsListRouter!
  
  @IBOutlet weak var newsTableView: UITableView!
  var displayedNewsFeed: [NewsList.RequestNewsFeed.ViewModel.NewsFeed] = []
  
  // MARK: - Object lifecycle
  
  override func awakeFromNib() {
    super.awakeFromNib()
    NewsListConfigurator.sharedInstance.configure(viewController: self)
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    setupTableView()
    doSomethingOnLoad()
  }
  
  fileprivate func setupTableView() {
    newsTableView.register(UINib(nibName: NewsListTableViewCell.identifier, bundle: Bundle.main),
                           forCellReuseIdentifier: NewsListTableViewCell.identifier)
    newsTableView.estimatedRowHeight = 100
    newsTableView.rowHeight = UITableViewAutomaticDimension
    
  }
  
  // MARK: - Event handling
  
  func doSomethingOnLoad() {
    // 1 demo viewcontroller doSomethingOnLoad
    // NOTE: Ask the Interactor to do some work
    let request = NewsList.RequestNewsFeed.Request()
    output.fetchNewsFeed(request: request)
  }
  
  // MARK: - Display logic
  
  func displayRequestNewsFeed(viewModel: NewsList.RequestNewsFeed.ViewModel) {
    // 5 demo displayRequestNewsFeed
    displayedNewsFeed = viewModel.displayNewsFeed
    newsTableView.reloadData()
  }
}

extension NewsListViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return displayedNewsFeed.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard let cell = tableView.dequeueReusableCell(withIdentifier: NewsListTableViewCell.identifier, for: indexPath) as? NewsListTableViewCell else {
      fatalError("Wrong Cell")
    }
    let viewModel = displayedNewsFeed[indexPath.row]
    cell.setCell(with: viewModel)
    return cell
  }

  
}
